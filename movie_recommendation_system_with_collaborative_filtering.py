# -*- coding: utf-8 -*-
"""Movie Recommendation System with Collaborative Filtering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cp_vv6oKNbwaWJt4Ynie2i6ZiuxTTG60

The MovieLens dataset is a popular benchmark used for developing and evaluating recommender systems.

 It provides movie ratings and other relevant information from users, allowing researchers and developers to test and refine recommendation algorithms. Here's a closer look at its key features:

Content:

    Movie Ratings: The dataset consists of millions of movie ratings provided by users on a scale (typically 1-5 stars).
    User Information: Depending on the specific MovieLens version, some datasets may include basic user demographics (age, gender, occupation).
    Movie Information: This might include movie titles, genres, release dates, or even links to external movie databases (e.g., IMDB, TMDB).
    Optional Data: Some versions offer additional data like tags applied to movies by users or movie-tag relevance scores.

Versions and Sizes:

MovieLens comes in various sizes, catering to different research needs. Here are some common versions:

    MovieLens 100K & 1M: Smaller datasets with around 100,000 or 1 million ratings, suitable for beginners or quick experimentation. They may include basic user demographics.
    MovieLens 10M & 20M: Medium-sized datasets with millions of ratings, offering a good balance between complexity and manageability.
    MovieLens 25M: The latest stable version with over 25 million ratings, ideal for more robust research and algorithm development.
"""

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Load movie data (replace 'movies.csv' with your filepath)
movies_df = pd.read_csv('/content/movie.csv')

# Create a user-item rating matrix
ratings_df = pd.pivot_table(movies_df, values='rating', index='userId', columns='movieId')

# Calculate cosine similarity matrix
similarity_matrix = cosine_similarity(ratings_df.transpose())

def recommend_movies(user_id, num_recommendations=5):
  """Recommends movies based on user's ratings"""
  # Get user's ratings
  user_ratings = ratings_df.loc[user_id]

  # Find similar users based on cosine similarity
  similar_users = similarity_matrix[user_ratings.index].sort_values(ascending=False)

  # Recommend movies based on similar users' ratings (excluding already rated movies)
  recommended_movies = ratings_df[~ratings_df.index.isin(user_ratings.index)].dot(similar_users) \
                     .sort_values(ascending=False)

  return recommended_movies.head(num_recommendations)

# Example usage: Recommend movies for user ID 10
recommendations = recommend_movies(10)
print(movies_df[movies_df['movieId'].isin(recommendations.index)]['title'])